C# 語法：變數、資料型別、運算子

陣列與集合（Array, List）

錯誤處理（try-catch）

基本 I/O（輸入/輸出）


✅ 1. 變數與資料型別
常見資料型別：
資料型別	說明	範例值
int	整數	1, 100, -50
double	浮點數（含小數）	3.14, -0.01
bool	布林值	true, false
string	字串	"Hello", "123"
char	字元	'A', 'b', '9'

✅ 2. 運算子（Operators）
數學運算子：
+  // 加法
-  // 減法
*  // 乘法
/  // 除法
%  // 餘數

比較運算子：
==  // 等於
!=  // 不等於
>   // 大於
<   // 小於
>=  // 大於等於
<=  // 小於等於

邏輯運算子：
&&  // AND（且）
||  // OR（或）
!   // NOT（非）

✅ 3. 陣列與集合（Array, List）
陣列（Array）：

固定大小，不可動態增減。
int[] numbers = new int[3] { 1, 2, 3 };
// 或簡寫：
int[] scores = { 90, 80, 70 };
Console.WriteLine(scores[0]);  // 輸出 90

List（需引用 System.Collections.Generic）：
可動態增減元素。
using System.Collections.Generic;
List<string> fruits = new List<string>();
fruits.Add("Apple");
fruits.Add("Banana");
Console.WriteLine(fruits[1]);  // 輸出 Banana

✅ 4. 錯誤處理（try-catch）
基本語法：
try
{
    int x = 10;
    int y = 0;
    int result = x / y; // 會發生錯誤
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("錯誤：不能除以零");
}
catch (Exception ex)
{
    Console.WriteLine("發生錯誤：" + ex.Message);
}
finally
{
    Console.WriteLine("這段一定會執行");
}


✅ 5. 基本 I/O（輸入/輸出）
輸出（Output）：
Console.WriteLine("Hello, World!");
Console.Write("請輸入你的名字：");
輸入（Input）：
string name = Console.ReadLine();
Console.WriteLine("你好，" + name + "！");


-----------------------------------------------------
✅ 基本輸出 Console.WriteLine()
string name = "Alice";
int age = 30;
Console.WriteLine("Name: " + name + ", Age: " + age);

✅ 方法一：格式化字串 (String.Format 或 Console.WriteLine 格式化)
string name = "Alice";
int age = 30;
Console.WriteLine("Name: {0}, Age: {1}", name, age);

✅ 方法二：插值字串（字串內插）🔹 推薦用法（C# 6.0+）
string name = "Alice";
int age = 30;
Console.WriteLine($"Name: {name}, Age: {age}");

✅ 額外格式化：數字、貨幣、小數、日期
整數補0（如 001、002）：
int id = 7;
Console.WriteLine($"ID: {id:D3}");  // 輸出：ID: 007

小數點格式化：
double price = 12.34567;
Console.WriteLine($"Price: {price:F2}");  // 輸出：Price: 12.35

貨幣格式（根據地區）：
double price = 99.99;
Console.WriteLine($"Price: {price:C}");  // 輸出：Price: $99.99（美式）

日期格式化：
DateTime today = DateTime.Now;
Console.WriteLine($"Today is {today:yyyy/MM/dd HH:mm:ss}");
// 輸出：Today is 2025/08/18 15:30:45（範例）

輸入方式

型別			方法名			功能
string			ReadString()	讀取文字
int				ReadInt()		讀取整數，含錯誤處理
double			ReadDouble()	讀取浮點數，小數點
bool			ReadBool()		讀取布林值，支援 yes/no, true/false
DateTime		ReadDate()		讀取日期時間，格式化
char			ReadChar()		讀取單一字元

小結：差異總覽
功能/特性		C / C++ scanf				C# 鍵盤輸入方式
直接讀取並轉型	✅ 是						❌ 否（需手動轉型）
格式化輸入		✅ 靠 %d %s %f 等格式字串	❌ 沒有格式化輸入（僅輸出可格式化）
錯誤處理支援	❌ 較差						✅ 使用 TryParse 等方式
型別安全		❌ 弱型別（可能錯誤）		✅ 強型別（更安全）
易用性			✅ 快速簡潔，但容易錯誤		✅ 稍長但易讀且安全
緩衝區管理		❌ 易出錯					✅ 自動管理記憶體

小結：scanf() 	使用建議

問題類型		解決方法
型別不符		確保格式控制與變數一致
忘記 &			指定變數記憶體位置
錯誤輸入		檢查 scanf() 回傳值
剩餘字元		使用 getchar() 清空緩衝區
字串溢位		限制 %Ns 長度，或使用 fgets()

如你想避免這些問題，推薦在 C 裡使用：

	fgets() + sscanf()（更安全）
	或改用 C++ 的 cin + getline
	
小結：各種 get 的適用情境
函式				語言	讀什麼？		含空白？	自動去除 \n？		用途
getchar()			C		1 字元			✔️			❌					讀單一輸入字元
cin.get()			C++		1 字元			✔️			❌					同上（C++ 版）
cin.get(ch)			C++		1 字元 → 儲存	✔️			❌					儲存進變數
cin.get(str, n)		C++		最多 n-1 字元	✔️			❌					讀字串含空白
getline(cin, str)	C++		一整行			✔️			✔️					安全讀整行輸入（推薦）

✅ 建議使用時機

👉 C 語言建議：

讀整數/字元用 scanf() + getchar() 搭配
避免使用 %s，改用 fgets() 較安全

👉 C++ 語言建議：

單字輸入用 cin >>
讀整行用 getline(cin, str)
混用 cin >> 和 getline() 時，一定加 cin.ignore()
